{"ast":null,"code":"var _jsxFileName = \"/home/vivieb/provapollo/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport \"antd/dist/antd.css\";\nimport { Button } from \"antd\";\nimport { FormApp } from \"./FormApp\"; //Query per prendere i dati dal database\n\nconst GET_PERIOD = gql`\n  query period {\n    periodTypes(scopeGroupId: 20124) {\n      items {\n        id\n        displayName\n      }\n    }\n  }\n`; //Query per rimuovere i dati dal database\n\nconst REMOVE_PERIOD = gql`\n  mutation($siteGroupId: Long!, $periodTypeIds: String!) {\n    deletePeriodType(siteGroupId: $siteGroupId, periodTypeIds: $periodTypeIds)\n  }\n`; //Query per aggiungere dati al Database\n\nconst ADD_PERIOD = gql`\n  mutation($periodType: InputPeriodType!) {\n    createPeriodType(periodType: $periodType) {\n      id\n      displayName\n    }\n  }\n`;\n\nconst App = () => {\n  const [dataForm, setDataForm] = useState({\n    groupId: 20128,\n    name: \"\",\n    code: \"\",\n    title: \"\",\n    description: \"\",\n    flat: false,\n    threshold: false,\n    flexible: false,\n    position: 0,\n    reportOverride: false,\n    workflowStatus: 0\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PERIOD, {\n    //Quando si aggiunge o si elimina un elemento il fetchPolicy serve ad aggiornare automaticamente la pagina\n    fetchPolicy: \"cache-and-network\"\n  });\n  console.log(data);\n  const [removePeriod] = useMutation(REMOVE_PERIOD, {\n    refetchQueries: [\"period\"]\n  });\n  const [addTodo] = useMutation(ADD_PERIOD, {\n    refetchQueries: [\"period\"]\n  });\n  console.log(\"Questo Ã¨ il log della mutation\");\n  console.log(ADD_PERIOD);\n\n  const onChange = () => {\n    localStorage.setItem(\"Summary\", JSON.stringify(dataForm));\n    console.log(JSON.stringify(dataForm));\n    addTodo({\n      variables: {\n        periodType: {\n          groupId: 20128,\n          name: dataForm.name,\n          code: dataForm.code,\n          title: JSON.stringify({\n            en_US: dataForm.title\n          }),\n          description: JSON.stringify({\n            en_US: dataForm.description\n          }),\n          flat: dataForm.flat,\n          threshold: dataForm.threshold,\n          flexible: dataForm.flexible,\n          position: 0,\n          reportOverride: false,\n          workflowStatus: 0\n        }\n      }\n    });\n  };\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Loading ...\");\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Edit \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"src/App.tsx\"), \" and save to reload.\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Hello\", React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, data.periodTypes.items.map(value => React.createElement(\"li\", {\n    key: value.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, value.displayName, React.createElement(Button, {\n    onClick: e => {\n      removePeriod({\n        variables: {\n          siteGroupId: 20128,\n          periodTypeIds: value.id\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Remove\"), React.createElement(Button, {\n    onClick: e => {\n      removePeriod({\n        variables: {\n          siteGroupId: 20128,\n          periodTypeIds: value.id\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Edit\")))), React.createElement(FormApp, {\n    onSubmit: onChange,\n    dataForm: dataForm,\n    setDataForm: setDataForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), React.createElement(\"a\", {\n    className: \"App-link\",\n    href: \"https://reactjs.org\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Learn React\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/vivieb/provapollo/src/App.tsx"],"names":["React","useState","useQuery","useMutation","gql","Button","FormApp","GET_PERIOD","REMOVE_PERIOD","ADD_PERIOD","App","dataForm","setDataForm","groupId","name","code","title","description","flat","threshold","flexible","position","reportOverride","workflowStatus","loading","error","data","fetchPolicy","console","log","removePeriod","refetchQueries","addTodo","onChange","localStorage","setItem","JSON","stringify","variables","periodType","en_US","logo","periodTypes","items","map","value","id","displayName","e","siteGroupId","periodTypeIds"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport \"antd/dist/antd.css\";\nimport { Button } from \"antd\";\nimport { FormApp } from \"./FormApp\";\n\n//Query per prendere i dati dal database\nconst GET_PERIOD = gql`\n  query period {\n    periodTypes(scopeGroupId: 20124) {\n      items {\n        id\n        displayName\n      }\n    }\n  }\n`;\n\n//Query per rimuovere i dati dal database\nconst REMOVE_PERIOD = gql`\n  mutation($siteGroupId: Long!, $periodTypeIds: String!) {\n    deletePeriodType(siteGroupId: $siteGroupId, periodTypeIds: $periodTypeIds)\n  }\n`;\n//Query per aggiungere dati al Database\nconst ADD_PERIOD = gql`\n  mutation($periodType: InputPeriodType!) {\n    createPeriodType(periodType: $periodType) {\n      id\n      displayName\n    }\n  }\n`;\ninterface Props {}\n\nconst App: React.FC<Props> = () => {\n  const [dataForm, setDataForm] = useState({\n    groupId: 20128,\n    name: \"\",\n    code: \"\",\n    title: \"\",\n    description: \"\",\n    flat: false,\n    threshold: false,\n    flexible: false,\n    position: 0,\n    reportOverride: false,\n    workflowStatus: 0\n  });\n\n  const { loading, error, data } = useQuery(GET_PERIOD, {\n    //Quando si aggiunge o si elimina un elemento il fetchPolicy serve ad aggiornare automaticamente la pagina\n    fetchPolicy: \"cache-and-network\"\n  });\n  console.log(data);\n\n  const [removePeriod] = useMutation(REMOVE_PERIOD, {\n    refetchQueries: [\"period\"]\n  });\n\n  const [addTodo] = useMutation(ADD_PERIOD, {\n    refetchQueries: [\"period\"]\n  });\n\n  console.log(\"Questo Ã¨ il log della mutation\");\n  console.log(ADD_PERIOD);\n\n  const onChange = () => {\n    localStorage.setItem(\"Summary\", JSON.stringify(dataForm));\n    console.log(JSON.stringify(dataForm));\n    addTodo({\n      variables: {\n        periodType: {\n          groupId: 20128,\n          name: dataForm.name,\n          code: dataForm.code,\n          title: JSON.stringify({ en_US: dataForm.title }),\n          description: JSON.stringify({ en_US: dataForm.description }),\n          flat: dataForm.flat,\n          threshold: dataForm.threshold,\n          flexible: dataForm.flexible,\n          position: 0,\n          reportOverride: false,\n          workflowStatus: 0\n        }\n      }\n    });\n  };\n  if (loading) return <p>Loading ...</p>;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <h3>\n          Hello\n          <ul>\n            {data.periodTypes.items.map((value: any) => (\n              <li key={value.id}>\n                {value.displayName}\n                <Button\n                  onClick={(e: any) => {\n                    removePeriod({\n                      variables: {\n                        siteGroupId: 20128,\n                        periodTypeIds: value.id\n                      }\n                    });\n                  }}\n                >\n                  Remove\n                </Button>\n                <Button\n                  onClick={(e: any) => {\n                    removePeriod({\n                      variables: {\n                        siteGroupId: 20128,\n                        periodTypeIds: value.id\n                      }\n                    });\n                  }}\n                >\n                  Edit\n                </Button>\n              </li>\n            ))}\n          </ul>\n          <FormApp\n            onSubmit={onChange}\n            dataForm={dataForm}\n            setDataForm={setDataForm}\n          ></FormApp>\n        </h3>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}