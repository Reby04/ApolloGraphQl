{"ast":null,"code":"var _jsxFileName = \"/home/vivieb/provapollo/src/index.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { gql } from \"apollo-boost\";\nimport ApolloClient from \"apollo-boost\";\nimport { Query } from \"@apollo/react-components\";\nconst client = new ApolloClient({\n  uri: \"http://192.168.41.253:8080/o/graphql\"\n}); // client\n//   .query({\n//     query: gql`\n//       {\n//         rates(currency: \"USD\") {\n//           currency\n//         }\n//       }\n//     `\n//   })\n//   .then(result => console.log(result));\n// const App = () => {\n//     return (<ApolloProvider client={client}>\n//         <div>\n//             <h2>My first Apollo app ðŸš€</h2>\n//         </div>\n//     </ApolloProvider>);\n// };\n\nconst EXCHANGE_RATES = gql`\n  {\n    rates(currency: \"USD\") {\n      currency\n      rate\n    }\n  }\n`;\n\nconst ExchangeRates = () => React.createElement(Query, {\n  query: EXCHANGE_RATES,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}, ({\n  loading,\n  error,\n  data\n}) => {\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Error :(\");\n  return data.rates.map(({\n    currency,\n    rate\n  }) => React.createElement(\"div\", {\n    key: currency,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, currency, \": \", rate)));\n});\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/vivieb/provapollo/src/index.tsx"],"names":["React","ReactDOM","App","serviceWorker","gql","ApolloClient","Query","client","uri","EXCHANGE_RATES","ExchangeRates","loading","error","data","rates","map","currency","rate","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,SAASC,KAAT,QAAsB,0BAAtB;AAIA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGL,GAAI;;;;;;;CAA3B;;AASA,MAAMM,aAAa,GAAG,MACpB,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAED,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACG,CAAC;AAAEE,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAA8B;AAC7B,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KACpB;AAAK,IAAA,GAAG,EAAED,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QADH,QACeC,IADf,CADF,CADK,CAAP;AAOD,CAZH,CADF;;AAiBAhB,QAAQ,CAACiB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAjB,aAAa,CAACkB,UAAd","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { gql } from \"apollo-boost\";\nimport ApolloClient from \"apollo-boost\";\nimport { render } from \"react-dom\";\nimport { Query } from \"@apollo/react-components\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst client = new ApolloClient({\n  uri: \"http://192.168.41.253:8080/o/graphql\"\n});\n\n// client\n//   .query({\n//     query: gql`\n//       {\n//         rates(currency: \"USD\") {\n//           currency\n//         }\n//       }\n//     `\n//   })\n//   .then(result => console.log(result));\n\n// const App = () => {\n//     return (<ApolloProvider client={client}>\n//         <div>\n//             <h2>My first Apollo app ðŸš€</h2>\n//         </div>\n//     </ApolloProvider>);\n// };\n\nconst EXCHANGE_RATES = gql`\n  {\n    rates(currency: \"USD\") {\n      currency\n      rate\n    }\n  }\n`;\n\nconst ExchangeRates = () => (\n  <Query query={EXCHANGE_RATES}>\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n\n      return data.rates.map(({ currency, rate }) => (\n        <div key={currency}>\n          <p>\n            {currency}: {rate}\n          </p>\n        </div>\n      ));\n    }}\n  </Query>\n);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}